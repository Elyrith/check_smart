#!/bin/bash

###############################################################################
#                                                                             #
#  Copyright (C) 2013 Ryan Loudfoot <ryan@delotha.com>                        #
#                                                                             #
#   This program is free software; you can redistribute it and/or modify      #
#   it under the terms of the GNU General Public License as published by      #
#   the Free Software Foundation; either version 2 of the License, or         #
#   (at your option) any later version.                                       #
#                                                                             #
#   This program is distributed in the hope that it will be useful,           #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#   GNU General Public License for more details.                              #
#                                                                             #
###############################################################################

###############################################################################
# The latest version of check_smart can be found at:                          #
# https://github.com/Elyrith/check_smart                                      #
###############################################################################

VERSION="Version 1.01"
AUTHOR="Ryan Loudfoot (ryan@delotha.com)"

# Sensor program
SENSORPROG=$(whereis -b -B /{bin,sbin,usr,etc} /{bin,sbin,usr,etc}/* -f smartctl | awk '{print $2}')

# Ryan's note: utils.sh is installed with nagios-plugins in with the plugins
# Check if utils.sh exists. This lets you use check_domain in a testing environment
# or outside of Nagios.
if [ -e "utils.sh" ]; then
	. "utils.sh"
else
	STATE_OK=0
	STATE_WARNING=1
	STATE_CRITICAL=2
	STATE_UNKNOWN=3
#	STATE_DEPENDENT=4    (Commented because it's unused.)
fi

shopt -s extglob

#### Functions ####

# Print version information
print_version()
{
	echo "$0 - $VERSION"
}

#Print help information
print_help()
{
	print_version
	echo "$AUTHOR"
	echo "Check SMART data for a drive and report results"
/bin/cat <<EOT

Options:
-h
   Print detailed help screen
-V
   Print version information

--warning
   Issue a warning state instead of a critical state
   Default is critical

--drive /dev/sda
   Set which drive to check
 
EOT
}


###### MAIN ########

# Warning threshold
thresh_warn=
# Critical threshold
thresh_crit=
# Hardware to monitor
drive=/dev/sda

# See if we have smartctl installed and can execute it
if [[ ! -x "$SENSORPROG" ]]; then
	echo "It appears you don't have smartmontools installed."
	exit $STATE_UNKOWN
fi

# Parse command line options
while [[ -n "$1" ]]; do 
   case "$1" in

       -h | --help)
           print_help
           exit $STATE_OK
           ;;

       -V | --version)
           print_version
           exit $STATE_OK
           ;;

       -\?)
	   print_help
           exit $STATE_OK
           ;;

       --warning)
           warning="yes"
	   shift 1
	   ;;

       --drive)
	   if [[ -z "$2" ]]; then
		echo "Option $1 requires an argument | Option $1 requires an argument"
		print_help
		exit $STATE_UNKNOWN
	   fi
		drive=$2
           shift 2
           ;;

	*)
           echo "Invalid option $1 | Invalid option $1"
           print_help
           exit $STATE_UNKNOWN
           ;;


   esac
done

# Check if a drive was specified
if [[ -z "$drive" ]]; then
	# No sensor to monitor were specified
	echo "No drive specified"
	print_help
	exit $STATE_UNKNOWN
fi


#Get the SMART data
smart=$($SENSORPROG -d ata -H "$drive" | grep "result" | cut -d: -f2 | cut -c2-7)

perfdata=$($SENSORPROG -d ata -H "$drive" | grep "result")


if [[ "$smart" == "PASSED" ]]; then
	echo "$drive is OK | $perfdata"
	exit $STATE_OK

#See if we wanted a warning instead of a critical
elif [[ "$warning" == "yes" ]]; then
		echo "$drive - S.M.A.R.T. WARNING | $perfdata"
		exit $STATE_WARNING

#Critical
else	
	echo "$drive - S.M.A.R.T. CRITICAL | $perfdata"
  exit $STATE_CRITICAL
fi

exit $STATE_UNKNOWN
